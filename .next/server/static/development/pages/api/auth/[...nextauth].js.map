{"version":3,"file":"static/development/pages/api/auth/[...nextauth].js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/api/auth/[...nextauth].js","webpack:///./util/mongodb.js","webpack:///external \"mongodb\"","webpack:///external \"next-auth\"","webpack:///external \"next-auth/providers\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\nimport { connectToDatabase } from \"../../../util/mongodb\"\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [\n    Providers.Credentials({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: \"Credentials\",\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"email@example.com\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      authorize: async (credentials) => {\n        //console.log(\"Enter the function.\")\n        const { db } = await connectToDatabase()\n        //console.log(\"Successful connection to database.\")\n        const user = await db.collection(\"User\").findOne(\n          { username: credentials.username},\n          {\n            username: 1,\n            password: 1,\n          })\n        //console.log(\"Successful get user\")\n        if (!user) {\n        //cannot find an existing user with the typed in username\n        //console.log(\"cannot find user in database\")\n        return Promise.resolve(null)\n        } \n        else {\n          //console.log(`user: ${user}`)\n          //console.log(`credentials_password: ${credentials.password}`)\n          //console.log(`database_password: ${user.password}`)\n          // check password if exist\n          if (credentials.password === user.password){\n            //console.log(`password: ${credentials.password}`)\n            //console.log(`user: ${JSON.stringify(user)}`)\n            return Promise.resolve(user)\n          } \n          else {\n            //console.log(`password: ${credentials.password}`)\n            return Promise.resolve(null)\n          }\n        }\n      },\n    })\n  ],\n  \n  // database: process.env.DATABASE_URL, \n\n  callbacks:{\n    session: async (session, user) => {\n      session.user.email= user.user.username\n      session.user.name = user.user.nickname\n      session.user.image = null\n      //console.log(`session_session: ${JSON.stringify(session)}`)\n      //console.log(`session_user: ${JSON.stringify(user)}`)\n      //console.log(`session_Token: ${JSON.stringify(sessionToken)}`)\n      // session.user = {email: session.user.email, name:session.user.name, image: null}\n      return Promise.resolve(session)\n    },\n    jwt: async (token, user, account, profile, isNewUser) => {\n      if (user) {token.user = user}\n      //console.log(`jwt_token: ${JSON.stringify(token)}`)\n      //console.log(`jwt_profile: ${JSON.stringify(profile)}`)      \n      //console.log(`jwt_account: ${JSON.stringify(account)}`)      \n      //console.log(`jwt_user: ${JSON.stringify(user)}`)\n      return Promise.resolve(token)\n    }\n  }\n  // session: {\n  //   jwt = true\n    \n  // }\n  // jwt {\n  //   signingKey: process.env.SECRET,\n  // },\n  //database: process.env.DATABASE_URL\n}\n\nexport default (req, res) => NextAuth(req, res, options)\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\n/*\nconst options = {\n  // https://next-auth.js.org/configuration/providers\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n    Providers.GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    })\n  ],\n  // Database optional. MySQL, Maria DB, Postgres and MongoDB are supported.\n  // https://next-auth.js.org/configuration/database\n  //\n  // Notes:\n  // * You must to install an appropriate node_module for your database\n  // * The Email provider requires a database (OAuth providers do not)\n  database: process.env.DATABASE_URL,\n\n  // The secret should be set to a reasonably long random string.\n  // It is used to sign cookies and to sign and encrypt JSON Web Tokens, unless\n  // a seperate secret is defined explicitly for encrypting the JWT.\n  secret: process.env.SECRET,\n\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    // jwt: true,\n    \n    // Seconds - How long until an idle session expires and is no longer valid.\n    // maxAge: 30 * 24 * 60 * 60, // 30 days\n\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens \n    // updateAge: 24 * 60 * 60, // 24 hours\n  },\n\n  // JSON Web tokens are only used for sessions if the `jwt: true` session\n  // option is set - or by default if no database is specified.\n  // https://next-auth.js.org/configuration/options#jwt\n  jwt: {\n    // A secret to use for key generation (you should set this explicitly)\n    // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw', \n    \n    // Set to true to use encryption (default: false)\n    // encryption: true,\n\n    // You can define your own encode/decode functions for signing and encryption\n    // if you want to override the default behaviour.\n    // encode: async ({ secret, token, maxAge }) => {},\n    // decode: async ({ secret, token, maxAge }) => {},\n  },\n\n  // You can define custom pages to override the built-in pages.\n  // The routes shown here are the default URLs that will be used when a custom\n  // pages is not specified for that route.\n  // https://next-auth.js.org/configuration/pages\n  pages: {\n    // signIn: '/api/auth/signin',  // Displays signin buttons\n    // signOut: '/api/auth/signout', // Displays form with sign out button\n    // error: '/api/auth/error', // Error code passed in query string as ?error=\n    // verifyRequest: '/api/auth/verify-request', // Used for check email page\n    // newUser: null // If set, new users will be directed here on first sign in\n  },\n\n  // Callbacks are asynchronous functions you can use to control what happens\n  // when an action is performed.\n  // https://next-auth.js.org/configuration/callbacks \n  callbacks: { \n    // signIn: async (user, account, profile) => { return Promise.resolve(true) },\n    // redirect: async (url, baseUrl) => { return Promise.resolve(baseUrl) },\n    // session: async (session, user) => { return Promise.resolve(session) },\n    // jwt: async (token, user, account, profile, isNewUser) => { return Promise.resolve(token) }\n  },\n\n  // Events are useful for logging\n  // https://next-auth.js.org/configuration/events\n  events: { },\n\n  // Enable debug messages in the console if you are having problems\n  debug: false,\n}*/","\nimport { MongoClient } from 'mongodb'\n\nconst MONGODB_URI = \"mongodb+srv://cs97_group:gymtracker@equipments.vkkku.mongodb.net/Treadmills?retryWrites=true&w=majority\"\nconst MONGODB_DB = \"Treadmills\"\n\nif (!MONGODB_URI) {\n  throw new Error(\n    'Please define the MONGODB_URI environment variable inside .env.local'\n  )\n}\n\nif (!MONGODB_DB) {\n  throw new Error(\n    'Please define the MONGODB_DB environment variable inside .env.local'\n  )\n}\n\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentiatlly\n * during API Route usage.\n */\nlet cached = global.mongo\nif (!cached) cached = global.mongo = {}\n\nexport async function connectToDatabase() {\n  if (cached.conn) return cached.conn\n  if (!cached.promise) {\n    const conn = {}\n    const opts = {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    }\n    cached.promise = MongoClient.connect(MONGODB_URI, opts)\n      .then((client) => {\n        conn.client = client\n        return client.db(MONGODB_DB)\n      })\n      .then((db) => {\n        conn.db = db\n        cached.conn = conn\n      })\n  }\n  await cached.promise\n  return cached.conn\n}\n","module.exports = require(\"mongodb\");","module.exports = require(\"next-auth\");","module.exports = require(\"next-auth/providers\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAzCA;AA6CA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAlBA;AAqBA;AAEA;AACA;AACA;AACA;AACA;AACA;AA9EA;AAgFA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;AAKA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC9CA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}