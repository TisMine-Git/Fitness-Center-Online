{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { connectToDatabase } from '../../util/mongodb';\nimport { ObjectId } from \"mongodb\";\n\nfunction handler(_x, _x2) {\n  return _handler.apply(this, arguments);\n}\n\nfunction _handler() {\n  _handler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var _yield$connectToDatab, db, method, body, name, action, like, password, nickname, id, treadmill, id2, user;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connectToDatabase();\n\n          case 2:\n            _yield$connectToDatab = _context.sent;\n            db = _yield$connectToDatab.db;\n            //console.log(db)\n            method = req.method, body = req.body;\n            name = body.name;\n            action = body.action;\n            like = body.likedBy;\n            password = body.password;\n            nickname = body.nickname;\n            _context.t0 = method;\n            _context.next = _context.t0 === \"POST\" ? 13 : _context.t0 === \"GET\" ? 56 : 57;\n            break;\n\n          case 13:\n            _context.t1 = action;\n            _context.next = _context.t1 === \"occupy\" ? 16 : _context.t1 === \"like\" ? 40 : _context.t1 === \"signup\" ? 45 : 55;\n            break;\n\n          case 16:\n            id = new ObjectId(body._id);\n            console.log(id);\n            _context.next = 20;\n            return db.collection(\"Treadmills\").findOne({\n              _id: id\n            }, {\n              status: 1,\n              who_occupied: 1\n            });\n\n          case 20:\n            treadmill = _context.sent;\n            console.log(\"find the threadmill\");\n            console.log(JSON.stringify(treadmill));\n            console.log(treadmill.status);\n\n            if (!(treadmill.status === 1)) {\n              _context.next = 30;\n              break;\n            }\n\n            console.log(\"I am in branch that will occupy\");\n            _context.next = 28;\n            return db.collection(\"Treadmills\").updateOne({\n              _id: id\n            }, {\n              $set: {\n                status: 0,\n                who_occupied: nickname\n              }\n            });\n\n          case 28:\n            _context.next = 38;\n            break;\n\n          case 30:\n            if (!(treadmill.who_occupied === nickname)) {\n              _context.next = 36;\n              break;\n            }\n\n            console.log(\"I am in branch that will unoccupy\");\n            _context.next = 34;\n            return db.collection(\"Treadmills\").updateOne({\n              _id: id\n            }, {\n              $set: {\n                status: 1,\n                who_occupied: \"\",\n                Liked_By: 0\n              }\n            });\n\n          case 34:\n            _context.next = 38;\n            break;\n\n          case 36:\n            console.log(\"I am in branch that will alert\"); // the alert still does not work, try something else later\n\n            window.alert(\"This machine has already been occupied by others\");\n\n          case 38:\n            res.status(200).json({\n              message: \"equipment occupied\"\n            });\n            return _context.abrupt(\"break\", 55);\n\n          case 40:\n            id2 = new ObjectId(body._id); //console.log(like)\n            //like other's exercise on this treadmill\n\n            _context.next = 43;\n            return db.collection(\"Treadmills\").updateOne({\n              _id: id2\n            }, {\n              $set: {\n                Liked_By: like + 1\n              }\n            });\n\n          case 43:\n            res.status(200).json({\n              message: 'Liked exercise!'\n            });\n            return _context.abrupt(\"break\", 55);\n\n          case 45:\n            _context.next = 47;\n            return db.collection(\"User\").findOne({\n              username: name\n            }, {\n              username: 1,\n              password: 1,\n              nickname: 1\n            });\n\n          case 47:\n            user = _context.sent;\n\n            if (user) {\n              _context.next = 53;\n              break;\n            }\n\n            _context.next = 51;\n            return db.collection(\"User\").insertOne({\n              username: name,\n              password: password,\n              nickname: nickname\n            });\n\n          case 51:\n            console.log(\"Congrats! You have successfully Signed Up!\\n                       Your Username is \".concat(name, \"\\n                       Your Password is \").concat(password, \"\\n\\n                      Your Nickname is \").concat(nickname, \"...\"));\n            res.status(200).json({\n              message: \"created one\"\n            });\n\n          case 53:\n            // else {\n            //   // check password if exist\n            //   if (user.password === password){\n            //     console.log(\"loged in\")\n            //   } else {\n            //     console.log(\"incorrect password\")\n            //   }\n            //   // console.log(user.username, user.password)\n            // }\n            res.status(200).json({\n              message: \"did not branch!\"\n            });\n            return _context.abrupt(\"break\", 55);\n\n          case 55:\n            return _context.abrupt(\"break\", 57);\n\n          case 56:\n            return _context.abrupt(\"break\", 57);\n\n          case 57:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handler.apply(this, arguments);\n}\n\nexport default handler;","map":{"version":3,"sources":["/home/runner/GroupProjectGYM/pages/api/writeToDatabase.js"],"names":["connectToDatabase","ObjectId","handler","req","res","db","method","body","name","action","like","likedBy","password","nickname","id","_id","console","log","collection","findOne","status","who_occupied","treadmill","JSON","stringify","updateOne","$set","Liked_By","window","alert","json","message","id2","username","user","insertOne"],"mappings":";;AAAA,SAASA,iBAAT,QAAkC,oBAAlC;AACA,SAASC,QAAT,QAAyB,SAAzB;;SAEeC,O;;;;;sEAAf,iBAAwBC,GAAxB,EAA6BC,GAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEuBJ,iBAAiB,EAFxC;;AAAA;AAAA;AAEUK,YAAAA,EAFV,yBAEUA,EAFV;AAGE;AACQC,YAAAA,MAJV,GAI2BH,GAJ3B,CAIUG,MAJV,EAIkBC,IAJlB,GAI2BJ,GAJ3B,CAIkBI,IAJlB;AAOQC,YAAAA,IAPR,GAOeD,IAAI,CAACC,IAPpB;AAQQC,YAAAA,MARR,GAQiBF,IAAI,CAACE,MARtB;AASQC,YAAAA,IATR,GASeH,IAAI,CAACI,OATpB;AAUQC,YAAAA,QAVR,GAUmBL,IAAI,CAACK,QAVxB;AAWQC,YAAAA,QAXR,GAWmBN,IAAI,CAACM,QAXxB;AAAA,0BAaUP,MAbV;AAAA,4CAeS,MAfT,wBAsGS,KAtGT;AAAA;;AAAA;AAAA,0BAiBcG,MAjBd;AAAA,4CAmBa,QAnBb,wBAqDa,MArDb,wBA+Da,QA/Db;AAAA;;AAAA;AAoBgBK,YAAAA,EApBhB,GAoBqB,IAAIb,QAAJ,CAAaM,IAAI,CAACQ,GAAlB,CApBrB;AAqBUC,YAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ;AArBV;AAAA,mBAsBkCT,EAAE,CAACa,UAAH,CAAc,YAAd,EAA4BC,OAA5B,CACtB;AAACJ,cAAAA,GAAG,EAAGD;AAAP,aADsB,EAEtB;AAAEM,cAAAA,MAAM,EAAE,CAAV;AACEC,cAAAA,YAAY,EAAC;AADf,aAFsB,CAtBlC;;AAAA;AAsBgBC,YAAAA,SAtBhB;AA2BUN,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYM,IAAI,CAACC,SAAL,CAAeF,SAAf,CAAZ;AACAN,YAAAA,OAAO,CAACC,GAAR,CAAYK,SAAS,CAACF,MAAtB;;AA7BV,kBA8BcE,SAAS,CAACF,MAAV,KAAqB,CA9BnC;AAAA;AAAA;AAAA;;AA+BWJ,YAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AA/BX;AAAA,mBAgCgBZ,EAAE,CAACa,UAAH,CAAc,YAAd,EAA4BO,SAA5B,CACJ;AAAEV,cAAAA,GAAG,EAAED;AAAP,aADI,EAEJ;AAAEY,cAAAA,IAAI,EAAE;AAAEN,gBAAAA,MAAM,EAAE,CAAV;AAAaC,gBAAAA,YAAY,EAAER;AAA3B;AAAR,aAFI,CAhChB;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAqCgBS,SAAS,CAACD,YAAV,KAA2BR,QArC3C;AAAA;AAAA;AAAA;;AAuCcG,YAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AAvCd;AAAA,mBAwCoBZ,EAAE,CAACa,UAAH,CAAc,YAAd,EAA4BO,SAA5B,CACN;AAAEV,cAAAA,GAAG,EAAED;AAAP,aADM,EAEN;AAAEY,cAAAA,IAAI,EAAE;AAAEN,gBAAAA,MAAM,EAAE,CAAV;AAAaC,gBAAAA,YAAY,EAAE,EAA3B;AAA+BM,gBAAAA,QAAQ,EAAE;AAAzC;AAAR,aAFM,CAxCpB;;AAAA;AAAA;AAAA;;AAAA;AA8CcX,YAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EA9Cd,CA+Cc;;AACAW,YAAAA,MAAM,CAACC,KAAP,CAAa,kDAAb;;AAhDd;AAmDUzB,YAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;AAnDV;;AAAA;AAsDgBC,YAAAA,GAtDhB,GAsDsB,IAAI/B,QAAJ,CAAaM,IAAI,CAACQ,GAAlB,CAtDtB,EAuDU;AACA;;AAxDV;AAAA,mBAyDgBV,EAAE,CAACa,UAAH,CAAc,YAAd,EAA4BO,SAA5B,CACJ;AAAEV,cAAAA,GAAG,EAAEiB;AAAP,aADI,EAEJ;AAAEN,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,QAAQ,EAAEjB,IAAI,GAAG;AAAnB;AAAR,aAFI,CAzDhB;;AAAA;AA6DUN,YAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;AA7DV;;AAAA;AAAA;AAAA,mBAiE6B1B,EAAE,CAACa,UAAH,CAAc,MAAd,EAAsBC,OAAtB,CACjB;AAAEc,cAAAA,QAAQ,EAAEzB;AAAZ,aADiB,EAEjB;AACEyB,cAAAA,QAAQ,EAAE,CADZ;AAEErB,cAAAA,QAAQ,EAAE,CAFZ;AAGEC,cAAAA,QAAQ,EAAE;AAHZ,aAFiB,CAjE7B;;AAAA;AAiEgBqB,YAAAA,IAjEhB;;AAAA,gBAwEeA,IAxEf;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA0EkB7B,EAAE,CAACa,UAAH,CAAc,MAAd,EAAsBiB,SAAtB,CACJ;AACEF,cAAAA,QAAQ,EAAEzB,IADZ;AAEEI,cAAAA,QAAQ,EAAEA,QAFZ;AAGEC,cAAAA,QAAQ,EAAEA;AAHZ,aADI,CA1ElB;;AAAA;AAiFYG,YAAAA,OAAO,CAACC,GAAR,+FAC6BT,IAD7B,uDAE6BI,QAF7B,wDAG6BC,QAH7B;AAIAT,YAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;;AArFZ;AAwFU;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3B,YAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;AAjGV;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA8GA,eAAe7B,OAAf","sourcesContent":["import { connectToDatabase } from '../../util/mongodb'\nimport { ObjectId } from \"mongodb\"\n\nasync function handler (req, res) {\n  //connect to MongoDB\n  const { db } = await connectToDatabase()\n  //console.log(db)\n  const { method, body } = req;\n\n\n  const name = body.name;\n  const action = body.action;\n  const like = body.likedBy;\n  const password = body.password;\n  const nickname = body.nickname;\n\n  switch( method ) {\n    //write into data base\n    case \"POST\":\n      //const tread =  db.collection(\"Treadmills\").find({_id: id})\n      switch (action) {\n        //occupy a treadmill\n        case \"occupy\":\n          const id = new ObjectId(body._id);\n          console.log(id)\n          const treadmill = await db.collection(\"Treadmills\").findOne(\n            {_id : id}, \n            { status: 1, \n              who_occupied:1,\n            })\n          console.log(\"find the threadmill\")\n          console.log(JSON.stringify(treadmill))\n          console.log(treadmill.status)\n          if (treadmill.status === 1)\n          {console.log(\"I am in branch that will occupy\")\n          await db.collection(\"Treadmills\").updateOne(\n            { _id: id },\n            { $set: { status: 0, who_occupied: nickname} }\n          )}\n          else{ \n            if (treadmill.who_occupied === nickname)\n            {\n              console.log(\"I am in branch that will unoccupy\")\n              await db.collection(\"Treadmills\").updateOne(\n              { _id: id },\n              { $set: { status: 1, who_occupied: \"\", Liked_By: 0}})\n            }\n            else\n            {\n              console.log(\"I am in branch that will alert\")\n              // the alert still does not work, try something else later\n              window.alert(\"This machine has already been occupied by others\");\n            }\n          }\n          res.status(200).json({ message: \"equipment occupied\"})\n          break;\n        case \"like\":\n          const id2 = new ObjectId(body._id);\n          //console.log(like)\n          //like other's exercise on this treadmill\n          await db.collection(\"Treadmills\").updateOne(\n            { _id: id2 },\n            { $set: { Liked_By: like + 1}}\n          )\n          res.status(200).json({ message: 'Liked exercise!'})\n          break;\n        case \"signup\":\n          // try to find the user passed in\n          const user = await db.collection(\"User\").findOne(\n            { username: name},\n            {\n              username: 1,\n              password: 1,\n              nickname: 1,\n            })\n          if (!user) {\n            //cannot find an existing user with the typed in username\n            await db.collection(\"User\").insertOne(\n              {\n                username: name,\n                password: password,\n                nickname: nickname,\n              }\n            ) \n            console.log(`Congrats! You have successfully Signed Up!\\n \\\n                      Your Username is ${name}\\n \\\n                      Your Password is ${password}\\n\n                      Your Nickname is ${nickname}...`)\n            res.status(200).json({ message: \"created one\"})\n            \n          } \n          // else {\n          //   // check password if exist\n          //   if (user.password === password){\n          //     console.log(\"loged in\")\n          //   } else {\n          //     console.log(\"incorrect password\")\n          //   }\n          //   // console.log(user.username, user.password)\n          // }\n          res.status(200).json({ message: \"did not branch!\"})\n          break;\n      }\n      break;\n    //read only   \n    case \"GET\":\n      /*other cases here*/\n      \n      break;\n  }\n  \n}\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}