{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { connectToDatabase } from \"../../../util/mongodb\";\nconst options = {\n  // Configure one or more authentication providers\n  providers: [Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: \"Credentials\",\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: {\n        label: \"Username\",\n        type: \"text\",\n        placeholder: \"email@example.com\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\"\n      }\n    },\n    authorize: async credentials => {\n      //console.log(\"Enter the function.\")\n      const {\n        db\n      } = await connectToDatabase(); //console.log(\"Successful connection to database.\")\n\n      const user = await db.collection(\"User\").findOne({\n        username: credentials.username\n      }, {\n        username: 1,\n        password: 1\n      }); //console.log(\"Successful get user\")\n\n      if (!user) {\n        //cannot find an existing user with the typed in username\n        //console.log(\"cannot find user in database\")\n        return Promise.resolve(null);\n      } else {\n        //console.log(`user: ${user}`)\n        //console.log(`credentials_password: ${credentials.password}`)\n        //console.log(`database_password: ${user.password}`)\n        // check password if exist\n        if (credentials.password === user.password) {\n          //console.log(`password: ${credentials.password}`)\n          //console.log(`user: ${JSON.stringify(user)}`)\n          return Promise.resolve(user);\n        } else {\n          //console.log(`password: ${credentials.password}`)\n          return Promise.resolve(null);\n        }\n      }\n    }\n  })],\n  // database: process.env.DATABASE_URL, \n  callbacks: {\n    session: async (session, user) => {\n      session.user.email = user.user.username;\n      session.user.name = user.user.nickname;\n      session.user.image = null; //console.log(`session_session: ${JSON.stringify(session)}`)\n      //console.log(`session_user: ${JSON.stringify(user)}`)\n      //console.log(`session_Token: ${JSON.stringify(sessionToken)}`)\n      // session.user = {email: session.user.email, name:session.user.name, image: null}\n\n      return Promise.resolve(session);\n    },\n    jwt: async (token, user, account, profile, isNewUser) => {\n      if (user) {\n        token.user = user;\n      } //console.log(`jwt_token: ${JSON.stringify(token)}`)\n      //console.log(`jwt_profile: ${JSON.stringify(profile)}`)      \n      //console.log(`jwt_account: ${JSON.stringify(account)}`)      \n      //console.log(`jwt_user: ${JSON.stringify(user)}`)\n\n\n      return Promise.resolve(token);\n    }\n  } // session: {\n  //   jwt = true\n  // }\n  // jwt {\n  //   signingKey: process.env.SECRET,\n  // },\n  //database: process.env.DATABASE_URL\n\n};\nexport default ((req, res) => NextAuth(req, res, options)); // For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\n\n/*\nconst options = {\n  // https://next-auth.js.org/configuration/providers\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n    Providers.GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    })\n  ],\n  // Database optional. MySQL, Maria DB, Postgres and MongoDB are supported.\n  // https://next-auth.js.org/configuration/database\n  //\n  // Notes:\n  // * You must to install an appropriate node_module for your database\n  // * The Email provider requires a database (OAuth providers do not)\n  database: process.env.DATABASE_URL,\n\n  // The secret should be set to a reasonably long random string.\n  // It is used to sign cookies and to sign and encrypt JSON Web Tokens, unless\n  // a seperate secret is defined explicitly for encrypting the JWT.\n  secret: process.env.SECRET,\n\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    // jwt: true,\n    \n    // Seconds - How long until an idle session expires and is no longer valid.\n    // maxAge: 30 * 24 * 60 * 60, // 30 days\n\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens \n    // updateAge: 24 * 60 * 60, // 24 hours\n  },\n\n  // JSON Web tokens are only used for sessions if the `jwt: true` session\n  // option is set - or by default if no database is specified.\n  // https://next-auth.js.org/configuration/options#jwt\n  jwt: {\n    // A secret to use for key generation (you should set this explicitly)\n    // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw', \n    \n    // Set to true to use encryption (default: false)\n    // encryption: true,\n\n    // You can define your own encode/decode functions for signing and encryption\n    // if you want to override the default behaviour.\n    // encode: async ({ secret, token, maxAge }) => {},\n    // decode: async ({ secret, token, maxAge }) => {},\n  },\n\n  // You can define custom pages to override the built-in pages.\n  // The routes shown here are the default URLs that will be used when a custom\n  // pages is not specified for that route.\n  // https://next-auth.js.org/configuration/pages\n  pages: {\n    // signIn: '/api/auth/signin',  // Displays signin buttons\n    // signOut: '/api/auth/signout', // Displays form with sign out button\n    // error: '/api/auth/error', // Error code passed in query string as ?error=\n    // verifyRequest: '/api/auth/verify-request', // Used for check email page\n    // newUser: null // If set, new users will be directed here on first sign in\n  },\n\n  // Callbacks are asynchronous functions you can use to control what happens\n  // when an action is performed.\n  // https://next-auth.js.org/configuration/callbacks \n  callbacks: { \n    // signIn: async (user, account, profile) => { return Promise.resolve(true) },\n    // redirect: async (url, baseUrl) => { return Promise.resolve(baseUrl) },\n    // session: async (session, user) => { return Promise.resolve(session) },\n    // jwt: async (token, user, account, profile, isNewUser) => { return Promise.resolve(token) }\n  },\n\n  // Events are useful for logging\n  // https://next-auth.js.org/configuration/events\n  events: { },\n\n  // Enable debug messages in the console if you are having problems\n  debug: false,\n}*/","map":{"version":3,"sources":["/home/runner/GroupProjectGYM/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","connectToDatabase","options","providers","Credentials","name","credentials","username","label","type","placeholder","password","authorize","db","user","collection","findOne","Promise","resolve","callbacks","session","email","nickname","image","jwt","token","account","profile","isNewUser","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AAEA,MAAMC,OAAO,GAAG;AACd;AACAC,EAAAA,SAAS,EAAE,CACTH,SAAS,CAACI,WAAV,CAAsB;AACpB;AACAC,IAAAA,IAAI,EAAE,aAFc;AAGpB;AACA;AACA;AACAC,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE,MAA3B;AAAmCC,QAAAA,WAAW,EAAE;AAAhD,OADC;AAEXC,MAAAA,QAAQ,EAAE;AAAEH,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAFC,KANO;AAUpBG,IAAAA,SAAS,EAAE,MAAON,WAAP,IAAuB;AAChC;AACA,YAAM;AAAEO,QAAAA;AAAF,UAAS,MAAMZ,iBAAiB,EAAtC,CAFgC,CAGhC;;AACA,YAAMa,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,MAAd,EAAsBC,OAAtB,CACjB;AAAET,QAAAA,QAAQ,EAAED,WAAW,CAACC;AAAxB,OADiB,EAEjB;AACEA,QAAAA,QAAQ,EAAE,CADZ;AAEEI,QAAAA,QAAQ,EAAE;AAFZ,OAFiB,CAAnB,CAJgC,CAUhC;;AACA,UAAI,CAACG,IAAL,EAAW;AACX;AACA;AACA,eAAOG,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACC,OAJD,MAKK;AACH;AACA;AACA;AACA;AACA,YAAIZ,WAAW,CAACK,QAAZ,KAAyBG,IAAI,CAACH,QAAlC,EAA2C;AACzC;AACA;AACA,iBAAOM,OAAO,CAACC,OAAR,CAAgBJ,IAAhB,CAAP;AACD,SAJD,MAKK;AACH;AACA,iBAAOG,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;AACF;AACF;AAzCmB,GAAtB,CADS,CAFG;AAgDd;AAEAC,EAAAA,SAAS,EAAC;AACRC,IAAAA,OAAO,EAAE,OAAOA,OAAP,EAAgBN,IAAhB,KAAyB;AAChCM,MAAAA,OAAO,CAACN,IAAR,CAAaO,KAAb,GAAoBP,IAAI,CAACA,IAAL,CAAUP,QAA9B;AACAa,MAAAA,OAAO,CAACN,IAAR,CAAaT,IAAb,GAAoBS,IAAI,CAACA,IAAL,CAAUQ,QAA9B;AACAF,MAAAA,OAAO,CAACN,IAAR,CAAaS,KAAb,GAAqB,IAArB,CAHgC,CAIhC;AACA;AACA;AACA;;AACA,aAAON,OAAO,CAACC,OAAR,CAAgBE,OAAhB,CAAP;AACD,KAVO;AAWRI,IAAAA,GAAG,EAAE,OAAOC,KAAP,EAAcX,IAAd,EAAoBY,OAApB,EAA6BC,OAA7B,EAAsCC,SAAtC,KAAoD;AACvD,UAAId,IAAJ,EAAU;AAACW,QAAAA,KAAK,CAACX,IAAN,GAAaA,IAAb;AAAkB,OAD0B,CAEvD;AACA;AACA;AACA;;;AACA,aAAOG,OAAO,CAACC,OAAR,CAAgBO,KAAhB,CAAP;AACD;AAlBO,GAlDI,CAsEd;AACA;AAEA;AACA;AACA;AACA;AACA;;AA7Ec,CAAhB;AAgFA,gBAAe,CAACI,GAAD,EAAMC,GAAN,KAAc/B,QAAQ,CAAC8B,GAAD,EAAMC,GAAN,EAAW5B,OAAX,CAArC,E,CAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\nimport { connectToDatabase } from \"../../../util/mongodb\"\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [\n    Providers.Credentials({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: \"Credentials\",\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"email@example.com\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      authorize: async (credentials) => {\n        //console.log(\"Enter the function.\")\n        const { db } = await connectToDatabase()\n        //console.log(\"Successful connection to database.\")\n        const user = await db.collection(\"User\").findOne(\n          { username: credentials.username},\n          {\n            username: 1,\n            password: 1,\n          })\n        //console.log(\"Successful get user\")\n        if (!user) {\n        //cannot find an existing user with the typed in username\n        //console.log(\"cannot find user in database\")\n        return Promise.resolve(null)\n        } \n        else {\n          //console.log(`user: ${user}`)\n          //console.log(`credentials_password: ${credentials.password}`)\n          //console.log(`database_password: ${user.password}`)\n          // check password if exist\n          if (credentials.password === user.password){\n            //console.log(`password: ${credentials.password}`)\n            //console.log(`user: ${JSON.stringify(user)}`)\n            return Promise.resolve(user)\n          } \n          else {\n            //console.log(`password: ${credentials.password}`)\n            return Promise.resolve(null)\n          }\n        }\n      },\n    })\n  ],\n  \n  // database: process.env.DATABASE_URL, \n\n  callbacks:{\n    session: async (session, user) => {\n      session.user.email= user.user.username\n      session.user.name = user.user.nickname\n      session.user.image = null\n      //console.log(`session_session: ${JSON.stringify(session)}`)\n      //console.log(`session_user: ${JSON.stringify(user)}`)\n      //console.log(`session_Token: ${JSON.stringify(sessionToken)}`)\n      // session.user = {email: session.user.email, name:session.user.name, image: null}\n      return Promise.resolve(session)\n    },\n    jwt: async (token, user, account, profile, isNewUser) => {\n      if (user) {token.user = user}\n      //console.log(`jwt_token: ${JSON.stringify(token)}`)\n      //console.log(`jwt_profile: ${JSON.stringify(profile)}`)      \n      //console.log(`jwt_account: ${JSON.stringify(account)}`)      \n      //console.log(`jwt_user: ${JSON.stringify(user)}`)\n      return Promise.resolve(token)\n    }\n  }\n  // session: {\n  //   jwt = true\n    \n  // }\n  // jwt {\n  //   signingKey: process.env.SECRET,\n  // },\n  //database: process.env.DATABASE_URL\n}\n\nexport default (req, res) => NextAuth(req, res, options)\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\n/*\nconst options = {\n  // https://next-auth.js.org/configuration/providers\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n    Providers.GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    })\n  ],\n  // Database optional. MySQL, Maria DB, Postgres and MongoDB are supported.\n  // https://next-auth.js.org/configuration/database\n  //\n  // Notes:\n  // * You must to install an appropriate node_module for your database\n  // * The Email provider requires a database (OAuth providers do not)\n  database: process.env.DATABASE_URL,\n\n  // The secret should be set to a reasonably long random string.\n  // It is used to sign cookies and to sign and encrypt JSON Web Tokens, unless\n  // a seperate secret is defined explicitly for encrypting the JWT.\n  secret: process.env.SECRET,\n\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    // jwt: true,\n    \n    // Seconds - How long until an idle session expires and is no longer valid.\n    // maxAge: 30 * 24 * 60 * 60, // 30 days\n\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens \n    // updateAge: 24 * 60 * 60, // 24 hours\n  },\n\n  // JSON Web tokens are only used for sessions if the `jwt: true` session\n  // option is set - or by default if no database is specified.\n  // https://next-auth.js.org/configuration/options#jwt\n  jwt: {\n    // A secret to use for key generation (you should set this explicitly)\n    // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw', \n    \n    // Set to true to use encryption (default: false)\n    // encryption: true,\n\n    // You can define your own encode/decode functions for signing and encryption\n    // if you want to override the default behaviour.\n    // encode: async ({ secret, token, maxAge }) => {},\n    // decode: async ({ secret, token, maxAge }) => {},\n  },\n\n  // You can define custom pages to override the built-in pages.\n  // The routes shown here are the default URLs that will be used when a custom\n  // pages is not specified for that route.\n  // https://next-auth.js.org/configuration/pages\n  pages: {\n    // signIn: '/api/auth/signin',  // Displays signin buttons\n    // signOut: '/api/auth/signout', // Displays form with sign out button\n    // error: '/api/auth/error', // Error code passed in query string as ?error=\n    // verifyRequest: '/api/auth/verify-request', // Used for check email page\n    // newUser: null // If set, new users will be directed here on first sign in\n  },\n\n  // Callbacks are asynchronous functions you can use to control what happens\n  // when an action is performed.\n  // https://next-auth.js.org/configuration/callbacks \n  callbacks: { \n    // signIn: async (user, account, profile) => { return Promise.resolve(true) },\n    // redirect: async (url, baseUrl) => { return Promise.resolve(baseUrl) },\n    // session: async (session, user) => { return Promise.resolve(session) },\n    // jwt: async (token, user, account, profile, isNewUser) => { return Promise.resolve(token) }\n  },\n\n  // Events are useful for logging\n  // https://next-auth.js.org/configuration/events\n  events: { },\n\n  // Enable debug messages in the console if you are having problems\n  debug: false,\n}*/"]},"metadata":{},"sourceType":"module"}