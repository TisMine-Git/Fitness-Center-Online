{"ast":null,"code":"import { MongoClient } from 'mongodb';\nconst MONGODB_URI = \"mongodb+srv://cs97_group:gymtracker@equipments.vkkku.mongodb.net/Treadmills?retryWrites=true&w=majority\";\nconst MONGODB_DB = \"Treadmills\";\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\n\nif (!MONGODB_DB) {\n  throw new Error('Please define the MONGODB_DB environment variable inside .env.local');\n}\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentiatlly\n * during API Route usage.\n */\n\n\nlet cached = global.mongo;\nif (!cached) cached = global.mongo = {};\nexport async function connectToDatabase() {\n  if (cached.conn) return cached.conn;\n\n  if (!cached.promise) {\n    const conn = {};\n    const opts = {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    };\n    cached.promise = MongoClient.connect(MONGODB_URI, opts).then(client => {\n      conn.client = client;\n      return client.db(MONGODB_DB);\n    }).then(db => {\n      conn.db = db;\n      cached.conn = conn;\n    });\n  }\n\n  await cached.promise;\n  return cached.conn;\n}","map":{"version":3,"sources":["/home/runner/GroupProjectGYM/util/mongodb.js"],"names":["MongoClient","MONGODB_URI","MONGODB_DB","Error","cached","global","mongo","connectToDatabase","conn","promise","opts","useNewUrlParser","useUnifiedTopology","connect","then","client","db"],"mappings":"AACA,SAASA,WAAT,QAA4B,SAA5B;AAEA,MAAMC,WAAW,GAAG,yGAApB;AACA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,IAAI,CAACD,WAAL,EAAkB;AAChB,QAAM,IAAIE,KAAJ,CACJ,sEADI,CAAN;AAGD;;AAED,IAAI,CAACD,UAAL,EAAiB;AACf,QAAM,IAAIC,KAAJ,CACJ,qEADI,CAAN;AAGD;AAED;;;;;;;AAKA,IAAIC,MAAM,GAAGC,MAAM,CAACC,KAApB;AACA,IAAI,CAACF,MAAL,EAAaA,MAAM,GAAGC,MAAM,CAACC,KAAP,GAAe,EAAxB;AAEb,OAAO,eAAeC,iBAAf,GAAmC;AACxC,MAAIH,MAAM,CAACI,IAAX,EAAiB,OAAOJ,MAAM,CAACI,IAAd;;AACjB,MAAI,CAACJ,MAAM,CAACK,OAAZ,EAAqB;AACnB,UAAMD,IAAI,GAAG,EAAb;AACA,UAAME,IAAI,GAAG;AACXC,MAAAA,eAAe,EAAE,IADN;AAEXC,MAAAA,kBAAkB,EAAE;AAFT,KAAb;AAIAR,IAAAA,MAAM,CAACK,OAAP,GAAiBT,WAAW,CAACa,OAAZ,CAAoBZ,WAApB,EAAiCS,IAAjC,EACdI,IADc,CACRC,MAAD,IAAY;AAChBP,MAAAA,IAAI,CAACO,MAAL,GAAcA,MAAd;AACA,aAAOA,MAAM,CAACC,EAAP,CAAUd,UAAV,CAAP;AACD,KAJc,EAKdY,IALc,CAKRE,EAAD,IAAQ;AACZR,MAAAA,IAAI,CAACQ,EAAL,GAAUA,EAAV;AACAZ,MAAAA,MAAM,CAACI,IAAP,GAAcA,IAAd;AACD,KARc,CAAjB;AASD;;AACD,QAAMJ,MAAM,CAACK,OAAb;AACA,SAAOL,MAAM,CAACI,IAAd;AACD","sourcesContent":["\nimport { MongoClient } from 'mongodb'\n\nconst MONGODB_URI = \"mongodb+srv://cs97_group:gymtracker@equipments.vkkku.mongodb.net/Treadmills?retryWrites=true&w=majority\"\nconst MONGODB_DB = \"Treadmills\"\n\nif (!MONGODB_URI) {\n  throw new Error(\n    'Please define the MONGODB_URI environment variable inside .env.local'\n  )\n}\n\nif (!MONGODB_DB) {\n  throw new Error(\n    'Please define the MONGODB_DB environment variable inside .env.local'\n  )\n}\n\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentiatlly\n * during API Route usage.\n */\nlet cached = global.mongo\nif (!cached) cached = global.mongo = {}\n\nexport async function connectToDatabase() {\n  if (cached.conn) return cached.conn\n  if (!cached.promise) {\n    const conn = {}\n    const opts = {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    }\n    cached.promise = MongoClient.connect(MONGODB_URI, opts)\n      .then((client) => {\n        conn.client = client\n        return client.db(MONGODB_DB)\n      })\n      .then((db) => {\n        conn.db = db\n        cached.conn = conn\n      })\n  }\n  await cached.promise\n  return cached.conn\n}\n"]},"metadata":{},"sourceType":"module"}