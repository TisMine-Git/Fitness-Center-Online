{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { MongoClient } from 'mongodb';\nvar MONGODB_URI = \"mongodb+srv://cs97_group:gymtracker@equipments.vkkku.mongodb.net/Treadmills?retryWrites=true&w=majority\";\nvar MONGODB_DB = \"Treadmills\";\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\n\nif (!MONGODB_DB) {\n  throw new Error('Please define the MONGODB_DB environment variable inside .env.local');\n}\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentiatlly\n * during API Route usage.\n */\n\n\nvar cached = global.mongo;\nif (!cached) cached = global.mongo = {};\nexport function connectToDatabase() {\n  return _connectToDatabase.apply(this, arguments);\n}\n\nfunction _connectToDatabase() {\n  _connectToDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var conn, opts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!cached.conn) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", cached.conn);\n\n          case 2:\n            if (!cached.promise) {\n              conn = {};\n              opts = {\n                useNewUrlParser: true,\n                useUnifiedTopology: true\n              };\n              cached.promise = MongoClient.connect(MONGODB_URI, opts).then(function (client) {\n                conn.client = client;\n                return client.db(MONGODB_DB);\n              }).then(function (db) {\n                conn.db = db;\n                cached.conn = conn;\n              });\n            }\n\n            _context.next = 5;\n            return cached.promise;\n\n          case 5:\n            return _context.abrupt(\"return\", cached.conn);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _connectToDatabase.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/runner/GroupProjectGYM/util/mongodb.js"],"names":["MongoClient","MONGODB_URI","MONGODB_DB","Error","cached","global","mongo","connectToDatabase","conn","promise","opts","useNewUrlParser","useUnifiedTopology","connect","then","client","db"],"mappings":";;AACA,SAASA,WAAT,QAA4B,SAA5B;AAEA,IAAMC,WAAW,GAAG,yGAApB;AACA,IAAMC,UAAU,GAAG,YAAnB;;AAEA,IAAI,CAACD,WAAL,EAAkB;AAChB,QAAM,IAAIE,KAAJ,CACJ,sEADI,CAAN;AAGD;;AAED,IAAI,CAACD,UAAL,EAAiB;AACf,QAAM,IAAIC,KAAJ,CACJ,qEADI,CAAN;AAGD;AAED;AACA;AACA;AACA;AACA;;;AACA,IAAIC,MAAM,GAAGC,MAAM,CAACC,KAApB;AACA,IAAI,CAACF,MAAL,EAAaA,MAAM,GAAGC,MAAM,CAACC,KAAP,GAAe,EAAxB;AAEb,gBAAsBC,iBAAtB;AAAA;AAAA;;;gFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDH,MAAM,CAACI,IADN;AAAA;AAAA;AAAA;;AAAA,6CACmBJ,MAAM,CAACI,IAD1B;;AAAA;AAEL,gBAAI,CAACJ,MAAM,CAACK,OAAZ,EAAqB;AACbD,cAAAA,IADa,GACN,EADM;AAEbE,cAAAA,IAFa,GAEN;AACXC,gBAAAA,eAAe,EAAE,IADN;AAEXC,gBAAAA,kBAAkB,EAAE;AAFT,eAFM;AAMnBR,cAAAA,MAAM,CAACK,OAAP,GAAiBT,WAAW,CAACa,OAAZ,CAAoBZ,WAApB,EAAiCS,IAAjC,EACdI,IADc,CACT,UAACC,MAAD,EAAY;AAChBP,gBAAAA,IAAI,CAACO,MAAL,GAAcA,MAAd;AACA,uBAAOA,MAAM,CAACC,EAAP,CAAUd,UAAV,CAAP;AACD,eAJc,EAKdY,IALc,CAKT,UAACE,EAAD,EAAQ;AACZR,gBAAAA,IAAI,CAACQ,EAAL,GAAUA,EAAV;AACAZ,gBAAAA,MAAM,CAACI,IAAP,GAAcA,IAAd;AACD,eARc,CAAjB;AASD;;AAjBI;AAAA,mBAkBCJ,MAAM,CAACK,OAlBR;;AAAA;AAAA,6CAmBEL,MAAM,CAACI,IAnBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["\nimport { MongoClient } from 'mongodb'\n\nconst MONGODB_URI = \"mongodb+srv://cs97_group:gymtracker@equipments.vkkku.mongodb.net/Treadmills?retryWrites=true&w=majority\"\nconst MONGODB_DB = \"Treadmills\"\n\nif (!MONGODB_URI) {\n  throw new Error(\n    'Please define the MONGODB_URI environment variable inside .env.local'\n  )\n}\n\nif (!MONGODB_DB) {\n  throw new Error(\n    'Please define the MONGODB_DB environment variable inside .env.local'\n  )\n}\n\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentiatlly\n * during API Route usage.\n */\nlet cached = global.mongo\nif (!cached) cached = global.mongo = {}\n\nexport async function connectToDatabase() {\n  if (cached.conn) return cached.conn\n  if (!cached.promise) {\n    const conn = {}\n    const opts = {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    }\n    cached.promise = MongoClient.connect(MONGODB_URI, opts)\n      .then((client) => {\n        conn.client = client\n        return client.db(MONGODB_DB)\n      })\n      .then((db) => {\n        conn.db = db\n        cached.conn = conn\n      })\n  }\n  await cached.promise\n  return cached.conn\n}\n"]},"metadata":{},"sourceType":"module"}