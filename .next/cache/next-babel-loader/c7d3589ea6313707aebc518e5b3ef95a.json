{"ast":null,"code":"import { connectToDatabase } from '../../util/mongodb';\nimport { ObjectId } from \"mongodb\";\nimport Router from 'next/router';\n/*helper function to calculate a user's total exercise time on a treadmill*/\n\nfunction diff(start, end) {\n  // var start_date = new Date(JSON.stringify(start));\n  // console.log(`start_date: ${start_date}`)\n  // var end_date = new Date(JSON.stringify(end));\n  // console.log(`end_date: ${end_date}`)\n  console.log(`start_date: ${start}`);\n  console.log(`end_date: ${end}`);\n  var diff = end.getTime() - start.getTime();\n  console.log(`diff: ${diff}`);\n  return diff; // var diff_h = Math.floor(diff / 1000 / 60 / 60);\n  // diff -= diff_h * 1000 * 60 * 60;\n  // var diff_m = Math.floor(diff / 1000 / 60);\n  // diff -= diff_m * 1000 * 60;\n  // var diff_s = Math.floor(diff / 1000);\n  // var diff_ms = diff - diff_s * 1000;\n  // return (diff_h <= 9 ? \"0\":\"\") + diff_h + \":\" + (diff_m <= 9 ? \"0\":\"\") + diff_m + \":\" + (diff_s <= 9 ? \"0\":\"\") + diff_s + \":\" + (diff_ms <= 9 ? \"0\":\"\") + diff_ms;\n}\n\nasync function handler(req, res) {\n  //connect to MongoDB\n  const {\n    db\n  } = await connectToDatabase(); //console.log(db)\n\n  const {\n    method,\n    body\n  } = req;\n  const name = body.name;\n  const action = body.action;\n  const like = body.likedBy;\n  const password = body.password;\n  const nickname = body.nickname;\n\n  switch (method) {\n    //write into data base\n    case \"POST\":\n      //const tread =  db.collection(\"Treadmills\").find({_id: id})\n      switch (action) {\n        //occupy a treadmill\n        case \"occupy\":\n          const id = new ObjectId(body._id);\n          console.log(id);\n          const treadmill = await db.collection(\"Treadmills\").findOne({\n            _id: id\n          }, {\n            status: 1,\n            who_occupied: 1,\n            start_time: 1,\n            end_time: 1,\n            totalTime: 1\n          });\n          const user_occupy = await db.collection(\"User\").findOne({\n            nickname: nickname\n          }, {\n            start_time: 1\n          }, {\n            has_occupied: 1\n          }); //console.log(\"find the treadmill\")\n          //console.log(JSON.stringify(treadmill))\n          //console.log(treadmill.status)\n\n          if (treadmill.status === 1 && user_occupy.has_occupied === 0) {\n            console.log(\"I am in branch that will occupy\");\n            const start = new Date(); //console.log(JSON.stringify(start))\n\n            await db.collection(\"Treadmills\").updateOne({\n              _id: id\n            }, {\n              $set: {\n                status: 0,\n                who_occupied: nickname\n              }\n            });\n            const user = await db.collection(\"User\").findOne({\n              nickname: nickname\n            }, {\n              start_time: 1\n            });\n            await db.collection(\"User\").updateOne({\n              nickname: nickname\n            }, {\n              $set: {\n                start_time: start,\n                has_occupied: 1\n              }\n            }, console.log(`start time: ${user.start_time}`));\n          } else {\n            if (treadmill.who_occupied === nickname && user_occupy.has_occupied === 1) {\n              console.log(\"I am in branch that will unoccupy\");\n              const end = new Date(); //console.log(JSON.stringify(end))\n\n              await db.collection(\"Treadmills\").updateOne({\n                _id: id\n              }, {\n                $set: {\n                  status: 1,\n                  who_occupied: \"\",\n                  Liked_By: 0\n                }\n              });\n              const user = await db.collection(\"User\").findOne({\n                nickname: nickname\n              }, {\n                totalTime: 1\n              }, {\n                start_time: 1\n              }, {\n                end_time: 1\n              });\n              await db.collection(\"User\").updateOne({\n                nickname: nickname\n              }, {\n                $set: {\n                  totalTime: user.totalTime + diff(user.start_time, end),\n                  start_time: new Date(),\n                  end_time: new Date(),\n                  has_occupied: 0\n                }\n              } //console.log(`total time: ${user.totalTime}`),\n              //console.log(`start time: ${user.start_time}`),\n              //console.log(`end time: ${user.end_time}`)\n              );\n            } else {\n              //res.statusMessage = \"This machine has already been occupied by others\";\n              //res.status(317).end()\n              console.log(\"I am in branch that will alert\"); // the alert still does not work, try something else later\n              // window.alert(\"This machine has already been occupied by others\");\n            }\n          } //console.log(\"I exited the branch and return 200\")\n\n\n          res.status(200).json({\n            message: \"equipment occupied\"\n          }); // Router.push('/')\n\n          break;\n\n        case \"like\":\n          const id2 = new ObjectId(body._id); //console.log(like)\n          //like other's exercise on this treadmill\n\n          await db.collection(\"Treadmills\").updateOne({\n            _id: id2\n          }, {\n            $set: {\n              Liked_By: like + 1\n            }\n          });\n          res.status(200).json({\n            message: 'Liked exercise!'\n          }); // Router.push('/')\n\n          break;\n\n        case \"signup\":\n          // try to find the user passed in\n          const user = await db.collection(\"User\").findOne({\n            username: name\n          }, {\n            username: 1,\n            password: 1,\n            nickname: 1\n          });\n\n          if (!user) {\n            //cannot find an existing user with the typed in username\n            await db.collection(\"User\").insertOne({\n              username: name,\n              password: password,\n              nickname: nickname,\n              start_time: new Date(),\n              end_time: new Date(),\n              totalTime: 0\n            });\n            console.log(`Congrats! You have successfully Signed Up!\\n \\\n                      Your Username is ${name}\\n \\\n                      Your Password is ${password}\\n\n                      Your Nickname is ${nickname}...`);\n            res.status(200).json({\n              message: \"created one\"\n            });\n          } // else {\n          //   // check password if exist\n          //   if (user.password === password){\n          //     console.log(\"loged in\")\n          //   } else {\n          //     console.log(\"incorrect password\")\n          //   }\n          //   // console.log(user.username, user.password)\n          // }\n\n\n          res.status(200).json({\n            message: \"did not branch!\"\n          });\n          break;\n      }\n\n      break;\n    //read only   \n\n    case \"GET\":\n      /*other cases here*/\n      break;\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["/home/runner/GroupProjectGYM/pages/api/writeToDatabase.js"],"names":["connectToDatabase","ObjectId","Router","diff","start","end","console","log","getTime","handler","req","res","db","method","body","name","action","like","likedBy","password","nickname","id","_id","treadmill","collection","findOne","status","who_occupied","start_time","end_time","totalTime","user_occupy","has_occupied","Date","updateOne","$set","user","Liked_By","json","message","id2","username","insertOne"],"mappings":"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","sourcesContent":["import { connectToDatabase } from '../../util/mongodb'\nimport { ObjectId } from \"mongodb\"\nimport Router from 'next/router'\n\n/*helper function to calculate a user's total exercise time on a treadmill*/\n  function diff (start, end) {\n    // var start_date = new Date(JSON.stringify(start));\n    // console.log(`start_date: ${start_date}`)\n    // var end_date = new Date(JSON.stringify(end));\n    // console.log(`end_date: ${end_date}`)\n    console.log(`start_date: ${start}`)\n    console.log(`end_date: ${end}`)\n    var diff = end.getTime() - start.getTime();\n    console.log(`diff: ${diff}`)\n    return diff;\n    // var diff_h = Math.floor(diff / 1000 / 60 / 60);\n    // diff -= diff_h * 1000 * 60 * 60;\n    // var diff_m = Math.floor(diff / 1000 / 60);\n    // diff -= diff_m * 1000 * 60;\n    // var diff_s = Math.floor(diff / 1000);\n    // var diff_ms = diff - diff_s * 1000;\n\n    // return (diff_h <= 9 ? \"0\":\"\") + diff_h + \":\" + (diff_m <= 9 ? \"0\":\"\") + diff_m + \":\" + (diff_s <= 9 ? \"0\":\"\") + diff_s + \":\" + (diff_ms <= 9 ? \"0\":\"\") + diff_ms;\n  }\n\nasync function handler (req, res) {\n  //connect to MongoDB\n  const { db } = await connectToDatabase()\n  //console.log(db)\n  const { method, body } = req;\n\n\n  const name = body.name;\n  const action = body.action;\n  const like = body.likedBy;\n  const password = body.password;\n  const nickname = body.nickname;\n\n  switch( method ) {\n    //write into data base\n    case \"POST\":\n      //const tread =  db.collection(\"Treadmills\").find({_id: id})\n      switch (action) {\n        //occupy a treadmill\n        case \"occupy\":\n          const id = new ObjectId(body._id);\n          console.log(id)\n          const treadmill = await db.collection(\"Treadmills\").findOne(\n            {_id : id}, \n            { status: 1, \n              who_occupied: 1,\n              start_time: 1,\n              end_time: 1,\n              totalTime: 1,\n            })\n          const user_occupy = await db.collection(\"User\").findOne(\n            { nickname: nickname },\n            { start_time: 1 },\n            { has_occupied: 1})\n          //console.log(\"find the treadmill\")\n          //console.log(JSON.stringify(treadmill))\n          //console.log(treadmill.status)\n          if (treadmill.status === 1 && user_occupy.has_occupied === 0)\n            { console.log(\"I am in branch that will occupy\")\n              const start = new Date()\n              //console.log(JSON.stringify(start))\n              await db.collection(\"Treadmills\").updateOne(\n                { _id: id },\n                { $set: { status: 0, who_occupied: nickname}})\n              const user = await db.collection(\"User\").findOne(\n              { nickname: nickname },\n              { start_time: 1 })\n              await db.collection(\"User\").updateOne(\n                { nickname: nickname },\n                { $set: { start_time : start, has_occupied: 1}},\n                console.log(`start time: ${user.start_time}`))\n            }\n          else{ \n            if (treadmill.who_occupied === nickname && user_occupy.has_occupied === 1)\n            {\n              console.log(\"I am in branch that will unoccupy\")\n              const end = new Date()\n              //console.log(JSON.stringify(end))\n              await db.collection(\"Treadmills\").updateOne(\n                { _id: id },\n                { $set: { status: 1, who_occupied: \"\", Liked_By: 0}})\n\n              const user = await db.collection(\"User\").findOne(\n                { nickname: nickname },\n                { totalTime: 1 },\n                { start_time: 1},\n                { end_time: 1} )\n              await db.collection(\"User\").updateOne(\n                { nickname: nickname },\n                { $set: \n                    {totalTime: user.totalTime + diff(user.start_time, end), \n                    start_time: new Date(),\n                    end_time: new Date(),\n                    has_occupied: 0}},\n                //console.log(`total time: ${user.totalTime}`),\n                //console.log(`start time: ${user.start_time}`),\n                //console.log(`end time: ${user.end_time}`)\n              )\n            }\n            else\n            {\n              //res.statusMessage = \"This machine has already been occupied by others\";\n              //res.status(317).end()\n              console.log(\"I am in branch that will alert\")\n              // the alert still does not work, try something else later\n              // window.alert(\"This machine has already been occupied by others\");\n            }\n          }\n          //console.log(\"I exited the branch and return 200\")\n          res.status(200).json({ message: \"equipment occupied\"})\n          // Router.push('/')\n          break;\n        case \"like\":\n          const id2 = new ObjectId(body._id);\n          //console.log(like)\n          //like other's exercise on this treadmill\n          await db.collection(\"Treadmills\").updateOne(\n            { _id: id2 },\n            { $set: { Liked_By: like + 1}}\n          )\n          res.status(200).json({ message: 'Liked exercise!'})\n          // Router.push('/')\n          break;\n        case \"signup\":\n          // try to find the user passed in\n          const user = await db.collection(\"User\").findOne(\n            { username: name},\n            {\n              username: 1,\n              password: 1,\n              nickname: 1,\n            })\n          if (!user) {\n            //cannot find an existing user with the typed in username\n            await db.collection(\"User\").insertOne(\n              {\n                username: name,\n                password: password,\n                nickname: nickname,\n                start_time: new Date(),\n                end_time: new Date(),\n                totalTime: 0,\n              }\n            ) \n            console.log(`Congrats! You have successfully Signed Up!\\n \\\n                      Your Username is ${name}\\n \\\n                      Your Password is ${password}\\n\n                      Your Nickname is ${nickname}...`)\n            res.status(200).json({ message: \"created one\"})\n            \n          } \n          // else {\n          //   // check password if exist\n          //   if (user.password === password){\n          //     console.log(\"loged in\")\n          //   } else {\n          //     console.log(\"incorrect password\")\n          //   }\n          //   // console.log(user.username, user.password)\n          // }\n          res.status(200).json({ message: \"did not branch!\"})\n          break;\n      }\n      break;\n    //read only   \n    case \"GET\":\n      /*other cases here*/\n      \n      break;\n  }\n}\n\n\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}