{"ast":null,"code":"import { connectToDatabase } from '../../util/mongodb';\nimport { ObjectId } from \"mongodb\";\nimport Router from 'next/router';\n\nasync function handler(req, res) {\n  //connect to MongoDB\n  const {\n    db\n  } = await connectToDatabase(); //console.log(db)\n\n  const {\n    method,\n    body\n  } = req;\n  const name = body.name;\n  const action = body.action;\n  const like = body.likedBy;\n  const password = body.password;\n  const nickname = body.nickname;\n  /*helper function to calculate a user's total exercise time on a treadmill*/\n\n  function diff(start, end) {\n    var start_date = new Date(start);\n    var end_date = new Date(end);\n    var diff = end_date.getTime() - start.getTime();\n    var diff_h = Math.floor(diff / 1000 / 60 / 60);\n    diff -= diff_h * 1000 * 60 * 60;\n    var diff_m = Math.floor(diff / 1000 / 60);\n    diff -= diff_m * 1000 * 60;\n    var diff_s = Math.floor(diff / 1000);\n    diff_ms = diff - diff_s * 1000;\n    return (diff_h <= 9 ? \"0\" : \"\") + diff_h + \":\" + (diff_m <= 9 ? \"0\" : \"\") + diff_m + \":\" + (diff_s <= 9 ? \"0\" : \"\") + diff_s + \":\" + (diff_ms <= 9 ? \"0\" : \"\") + diff_ms;\n  }\n\n  switch (method) {\n    //write into data base\n    case \"POST\":\n      //const tread =  db.collection(\"Treadmills\").find({_id: id})\n      switch (action) {\n        //occupy a treadmill\n        case \"occupy\":\n          const id = new ObjectId(body._id);\n          console.log(id);\n          const treadmill = await db.collection(\"Treadmills\").findOne({\n            _id: id\n          }, {\n            status: 1,\n            who_occupied: 1\n          });\n          console.log(\"find the treadmill\");\n          console.log(JSON.stringify(treadmill));\n          console.log(treadmill.status);\n\n          if (treadmill.status === 1) {\n            console.log(\"I am in branch that will occupy\");\n            start = new Date();\n            console.log(JSON.stringify(start));\n            await db.collection(\"Treadmills\").updateOne({\n              _id: id\n            }, {\n              $set: {\n                status: 0,\n                who_occupied: nickname,\n                start_time: JSON.stringify(start)\n              }\n            });\n          } else {\n            if (treadmill.who_occupied === nickname) {\n              console.log(\"I am in branch that will unoccupy\");\n              end = new Date();\n              console.log(JSON.stringify(end));\n              await db.collection(\"Treadmills\").updateOne({\n                _id: id\n              }, {\n                $set: {\n                  status: 1,\n                  who_occupied: \"\",\n                  Liked_By: 0,\n                  end_time: JSON.stringify(end),\n                  duration: diff(treadmill.start_time, JSON.stringify(end))\n                }\n              });\n              console.log(duration);\n            } else {\n              console.log(\"I am in branch that will alert\"); // the alert still does not work, try something else later\n              // window.alert(\"This machine has already been occupied by others\");\n            }\n          }\n\n          res.status(200).json({\n            message: \"equipment occupied\"\n          }); // Router.push('/')\n\n          break;\n\n        case \"like\":\n          const id2 = new ObjectId(body._id); //console.log(like)\n          //like other's exercise on this treadmill\n\n          await db.collection(\"Treadmills\").updateOne({\n            _id: id2\n          }, {\n            $set: {\n              Liked_By: like + 1\n            }\n          });\n          res.status(200).json({\n            message: 'Liked exercise!'\n          }); // Router.push('/')\n\n          break;\n\n        case \"signup\":\n          // try to find the user passed in\n          const user = await db.collection(\"User\").findOne({\n            username: name\n          }, {\n            username: 1,\n            password: 1,\n            nickname: 1\n          });\n\n          if (!user) {\n            //cannot find an existing user with the typed in username\n            await db.collection(\"User\").insertOne({\n              username: name,\n              password: password,\n              nickname: nickname\n            });\n            console.log(`Congrats! You have successfully Signed Up!\\n \\\n                      Your Username is ${name}\\n \\\n                      Your Password is ${password}\\n\n                      Your Nickname is ${nickname}...`);\n            res.status(200).json({\n              message: \"created one\"\n            });\n          } // else {\n          //   // check password if exist\n          //   if (user.password === password){\n          //     console.log(\"loged in\")\n          //   } else {\n          //     console.log(\"incorrect password\")\n          //   }\n          //   // console.log(user.username, user.password)\n          // }\n\n\n          res.status(200).json({\n            message: \"did not branch!\"\n          });\n          break;\n      }\n\n      break;\n    //read only   \n\n    case \"GET\":\n      /*other cases here*/\n      break;\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["/home/runner/GroupProjectGYM/pages/api/writeToDatabase.js"],"names":["connectToDatabase","ObjectId","Router","handler","req","res","db","method","body","name","action","like","likedBy","password","nickname","diff","start","end","start_date","Date","end_date","getTime","diff_h","Math","floor","diff_m","diff_s","diff_ms","id","_id","console","log","treadmill","collection","findOne","status","who_occupied","JSON","stringify","updateOne","$set","start_time","Liked_By","end_time","duration","json","message","id2","user","username","insertOne"],"mappings":"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","sourcesContent":["import { connectToDatabase } from '../../util/mongodb'\nimport { ObjectId } from \"mongodb\"\nimport Router from 'next/router'\n\nasync function handler (req, res) {\n  //connect to MongoDB\n  const { db } = await connectToDatabase()\n  //console.log(db)\n  const { method, body } = req;\n\n\n  const name = body.name;\n  const action = body.action;\n  const like = body.likedBy;\n  const password = body.password;\n  const nickname = body.nickname;\n\n  /*helper function to calculate a user's total exercise time on a treadmill*/\n  function diff (start, end) {\n    \n    var start_date = new Date(start)\n    var end_date = new Date(end)\n    var diff = end_date.getTime() - start.getTime();\n    var diff_h = Math.floor(diff / 1000 / 60 / 60);\n    diff -= diff_h * 1000 * 60 * 60;\n    var diff_m = Math.floor(diff / 1000 / 60);\n    diff -= diff_m * 1000 * 60;\n    var diff_s = Math.floor(diff / 1000);\n    diff_ms = diff - diff_s * 1000;\n\n    return (diff_h <= 9 ? \"0\":\"\") + diff_h + \":\" + (diff_m <= 9 ? \"0\":\"\") + diff_m + \":\" + (diff_s <= 9 ? \"0\":\"\") + diff_s + \":\" + (diff_ms <= 9 ? \"0\":\"\") + diff_ms;\n  }\n\n  switch( method ) {\n    //write into data base\n    case \"POST\":\n      //const tread =  db.collection(\"Treadmills\").find({_id: id})\n      switch (action) {\n        //occupy a treadmill\n        case \"occupy\":\n          const id = new ObjectId(body._id);\n          console.log(id)\n          const treadmill = await db.collection(\"Treadmills\").findOne(\n            {_id : id}, \n            { status: 1, \n              who_occupied: 1,\n            })\n          console.log(\"find the treadmill\")\n          console.log(JSON.stringify(treadmill))\n          console.log(treadmill.status)\n          if (treadmill.status === 1)\n            { console.log(\"I am in branch that will occupy\")\n              start = new Date()\n              console.log(JSON.stringify(start))\n              await db.collection(\"Treadmills\").updateOne(\n                { _id: id },\n                { $set: { status: 0, who_occupied: nickname, start_time: JSON.stringify(start)} })\n            }\n          else{ \n            if (treadmill.who_occupied === nickname)\n            {\n              console.log(\"I am in branch that will unoccupy\")\n              end = new Date()\n              console.log(JSON.stringify(end))\n              await db.collection(\"Treadmills\").updateOne(\n                { _id: id },\n                { $set: { status: 1, who_occupied: \"\", Liked_By: 0, end_time: JSON.stringify(end), duration: diff(treadmill.start_time, JSON.stringify(end))}})\n              console.log(duration)\n            }\n\n            else\n            {\n              console.log(\"I am in branch that will alert\")\n              // the alert still does not work, try something else later\n              // window.alert(\"This machine has already been occupied by others\");\n            }\n          }\n          res.status(200).json({ message: \"equipment occupied\"})\n          // Router.push('/')\n          break;\n        case \"like\":\n          const id2 = new ObjectId(body._id);\n          //console.log(like)\n          //like other's exercise on this treadmill\n          await db.collection(\"Treadmills\").updateOne(\n            { _id: id2 },\n            { $set: { Liked_By: like + 1}}\n          )\n          res.status(200).json({ message: 'Liked exercise!'})\n          // Router.push('/')\n          break;\n        case \"signup\":\n          // try to find the user passed in\n          const user = await db.collection(\"User\").findOne(\n            { username: name},\n            {\n              username: 1,\n              password: 1,\n              nickname: 1,\n            })\n          if (!user) {\n            //cannot find an existing user with the typed in username\n            await db.collection(\"User\").insertOne(\n              {\n                username: name,\n                password: password,\n                nickname: nickname,\n              }\n            ) \n            console.log(`Congrats! You have successfully Signed Up!\\n \\\n                      Your Username is ${name}\\n \\\n                      Your Password is ${password}\\n\n                      Your Nickname is ${nickname}...`)\n            res.status(200).json({ message: \"created one\"})\n            \n          } \n          // else {\n          //   // check password if exist\n          //   if (user.password === password){\n          //     console.log(\"loged in\")\n          //   } else {\n          //     console.log(\"incorrect password\")\n          //   }\n          //   // console.log(user.username, user.password)\n          // }\n          res.status(200).json({ message: \"did not branch!\"})\n          break;\n      }\n      break;\n    //read only   \n    case \"GET\":\n      /*other cases here*/\n      \n      break;\n  }\n}\n\n\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}