{"ast":null,"code":"import { connectToDatabase } from '../../util/mongodb';\nimport { ObjectId } from \"mongodb\";\n\nasync function handler(req, res) {\n  //connect to MongoDB\n  const {\n    db\n  } = await connectToDatabase(); //console.log(db)\n\n  const {\n    method,\n    body\n  } = req;\n  const name = body.name;\n  const action = body.action;\n  const like = body.likedBy;\n  const password = body.password;\n  const nickname = body.nickname;\n\n  switch (method) {\n    //write into data base\n    case \"POST\":\n      //const tread =  db.collection(\"Treadmills\").find({_id: id})\n      switch (action) {\n        //occupy a treadmill\n        case \"occupy\":\n          const id = new ObjectId(body._id);\n          await db.collection(\"Treadmills\").updateOne({\n            _id: id\n          }, {\n            $set: {\n              status: 0\n            }\n          });\n          res.status(200).json({\n            message: \"equipment occupied\"\n          });\n          break;\n\n        case \"like\":\n          const id2 = new ObjectId(body._id);\n          console.log(like); //like other's exercise on this treadmill\n\n          await db.collection(\"Treadmills\").updateOne({\n            _id: id2\n          }, {\n            $set: {\n              Liked_By: like + 1\n            }\n          });\n          res.status(200).json({\n            message: 'Liked exercise!'\n          });\n          break;\n\n        case \"signup\":\n          // try to find the user passed in\n          const user = await db.collection(\"User\").findOne({\n            username: name\n          }, {\n            username: 1,\n            password: 1,\n            nickname: 1\n          });\n\n          if (!user) {\n            //cannot find an existing user with the typed in username\n            await db.collection(\"User\").insertOne({\n              username: name,\n              password: password,\n              nickname: nickname\n            });\n            console.log(`Congrats! You have successfully Signed Up!\\n \\\n                      Your Username is ${name}\\n \\\n                      Your Password is ${password}\\n\n                      Your Nickname is ${nickname}...`);\n            res.status(200).json({\n              message: \"created one\"\n            });\n          } // else {\n          //   // check password if exist\n          //   if (user.password === password){\n          //     console.log(\"loged in\")\n          //   } else {\n          //     console.log(\"incorrect password\")\n          //   }\n          //   // console.log(user.username, user.password)\n          // }\n\n\n          res.status(200).json({\n            message: \"did not branch!\"\n          });\n          break;\n      }\n\n      break;\n    //read only   \n\n    case \"GET\":\n      /*other cases here*/\n      break;\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["/home/runner/GroupProjectGYM/pages/api/writeToDatabase.js"],"names":["connectToDatabase","ObjectId","handler","req","res","db","method","body","name","action","like","likedBy","password","nickname","id","_id","collection","updateOne","$set","status","json","message","id2","console","log","Liked_By","user","findOne","username","insertOne"],"mappings":"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","sourcesContent":["import { connectToDatabase } from '../../util/mongodb'\nimport { ObjectId } from \"mongodb\"\n\nasync function handler (req, res) {\n  //connect to MongoDB\n  const { db } = await connectToDatabase()\n  //console.log(db)\n  const { method, body } = req;\n\n\n  const name = body.name;\n  const action = body.action;\n  const like = body.likedBy;\n  const password = body.password;\n  const nickname = body.nickname;\n\n  switch( method ) {\n    //write into data base\n    case \"POST\":\n      //const tread =  db.collection(\"Treadmills\").find({_id: id})\n      switch (action) {\n        //occupy a treadmill\n        case \"occupy\":\n          const id = new ObjectId(body._id);\n          await db.collection(\"Treadmills\").updateOne(\n            { _id: id },\n            { $set: { status: 0} }\n          )\n          res.status(200).json({ message: \"equipment occupied\"})\n          break;\n        case \"like\":\n          const id2 = new ObjectId(body._id);\n          console.log(like)\n          //like other's exercise on this treadmill\n          await db.collection(\"Treadmills\").updateOne(\n            { _id: id2 },\n            { $set: { Liked_By: like + 1}}\n          )\n          res.status(200).json({ message: 'Liked exercise!'})\n          break;\n        case \"signup\":\n          // try to find the user passed in\n          const user = await db.collection(\"User\").findOne(\n            { username: name},\n            {\n              username: 1,\n              password: 1,\n              nickname: 1,\n            })\n          if (!user) {\n            //cannot find an existing user with the typed in username\n            await db.collection(\"User\").insertOne(\n              {\n                username: name,\n                password: password,\n                nickname: nickname,\n              }\n            ) \n            console.log(`Congrats! You have successfully Signed Up!\\n \\\n                      Your Username is ${name}\\n \\\n                      Your Password is ${password}\\n\n                      Your Nickname is ${nickname}...`)\n            res.status(200).json({ message: \"created one\"})\n            \n          } \n          // else {\n          //   // check password if exist\n          //   if (user.password === password){\n          //     console.log(\"loged in\")\n          //   } else {\n          //     console.log(\"incorrect password\")\n          //   }\n          //   // console.log(user.username, user.password)\n          // }\n          res.status(200).json({ message: \"did not branch!\"})\n          break;\n      }\n      break;\n    //read only   \n    case \"GET\":\n      /*other cases here*/\n      \n      break;\n  }\n  \n}\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}