webpackHotUpdate_N_E("pages/index",{

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/*! exports provided: __N_SSP, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__N_SSP\", function() { return __N_SSP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return equipments; });\n/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_auth_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next-auth/client */ \"./node_modules/next-auth/client.js\");\n/* harmony import */ var next_auth_client__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_auth_client__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/router */ \"./node_modules/next/dist/client/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_5__);\n\n\nvar _jsxFileName = \"/home/runner/GroupProjectGYM/pages/index.js\",\n    _s = $RefreshSig$();\n\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement;\n//import Treadmill from '../components/Treadmill'\n//This is test for commit using replit\n\n\n\n //import Treadmill from '../components/Treadmill'\n// import { handler } from './api/writeToDatabase'\n\n/* pass in data from user and define the display structure of Treadmill*/\n\nfunction Treadmill(_ref) {\n  var treadmill = _ref.treadmill,\n      session = _ref.session;\n  return __jsx(\"div\", {\n    className: \"jsx-1127658955\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return fetch(\"https://GroupProjectGYM.zihaodong.repl.co/api/writeToDatabase\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: treadmill.name,\n          _id: treadmill._id,\n          likedBy: treadmill.Liked_By,\n          action: \"occupy\",\n          password: \"n/a\",\n          nickname: session.user.name\n        })\n      }).then(function () {\n        next_router__WEBPACK_IMPORTED_MODULE_5___default.a.push(window.location.href);\n      });\n    },\n    className: \"jsx-1127658955\" + \" \" + ((treadmill.status === 1 ? \"treadmillFree\" : \"treadmillOccupied\") || \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-1127658955\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, treadmill.name)), __jsx(\"button\", {\n    onClick: function onClick() {\n      return fetch(\"https://GroupProjectGYM.zihaodong.repl.co/api/writeToDatabase\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: treadmill.name,\n          _id: treadmill._id,\n          likedBy: treadmill.Liked_By,\n          action: \"like\",\n          password: \"n/a\",\n          nickname: session.user.name\n        })\n      }).then(function () {\n        router = Object(next_router__WEBPACK_IMPORTED_MODULE_5__[\"withRouter\"])();\n        router.reload(\"/\");\n      });\n    },\n    className: \"jsx-1127658955\" + \" \" + \"likeButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \" \", __jsx(\"div\", {\n    className: \"jsx-1127658955\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 18\n    }\n  }, \" Power Up ! \")), __jsx(\"li\", {\n    className: \"jsx-1127658955\" + \" \" + \"treadInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Status: \", treadmill.status === 1 ? \"free\" : \"occupied by \".concat(\"\".concat(treadmill.who_occupied))), __jsx(\"li\", {\n    className: \"jsx-1127658955\" + \" \" + \"treadInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Powered Up By \", treadmill.Liked_By, \" Users\"), __jsx(\"br\", {\n    className: \"jsx-1127658955\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n    id: \"1127658955\",\n    __self: this\n  }, \".treadmillFree.jsx-1127658955{background:#99ccff;width:100px;height:60px;margin-top:5px;margin-left:5px;margin-right:5px;}.treadmillFree.jsx-1127658955:hover{background:#3399ff;}.treadmillOccupied.jsx-1127658955{background:#ffff99;width:100px;height:60px;margin-top:5px;margin-left:5px;margin-right:5px;}.treadmillOccupied.jsx-1127658955:hover{background:#ffff00;}.treadInfo.jsx-1127658955{margin-left:20px;color:#0000ff;}.likeButton.jsx-1127658955{background:#00ff00;width:90px;height:30px;margin-top:5px;margin-left:5px;margin-right:5px;}.likeButton.jsx-1127658955:hover{background:#00cc00;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/runner/GroupProjectGYM/pages/index.js */\"));\n}\n/* Styling and formating the page */\n\n\n_c = Treadmill;\nvar __N_SSP = true;\nfunction equipments(_ref2) {\n  _s();\n\n  var _this = this;\n\n  var data = _ref2.data;\n  // Router.push(\"https://GroupProjectGYM.zihaodong.repl.co\")\n  console.log(data);\n\n  var _useSession = Object(next_auth_client__WEBPACK_IMPORTED_MODULE_4__[\"useSession\"])(),\n      _useSession2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_useSession, 2),\n      session = _useSession2[0],\n      loading = _useSession2[1]; //console.log(session?\"session\":\"not session\")\n\n\n  return session ? // <button onClick={() => (window.alert(\"occupy treadmill\"))}>\n  //   \"Treadmill 1\"\n  __jsx(\"div\", {\n    className: \"jsx-1775877772\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    className: \"jsx-1775877772\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-1775877772\" + \" \" + \"UCLA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, \"UCLA\"), __jsx(\"div\", {\n    className: \"jsx-1775877772\" + \" \" + \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \" Treadmills At JWC\"), __jsx(\"button\", {\n    onClick: next_auth_client__WEBPACK_IMPORTED_MODULE_4__[\"signOut\"],\n    className: \"jsx-1775877772\" + \" \" + \"loginButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, \"sign out\")), __jsx(\"div\", {\n    className: \"jsx-1775877772\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \" logged in as \", session.user.name, \" \"), __jsx(\"div\", {\n    className: \"jsx-1775877772\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, data.map(function (treadmill) {\n    return __jsx(Treadmill, {\n      key: treadmill._id,\n      treadmill: treadmill,\n      session: session,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    });\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n    id: \"1775877772\",\n    __self: this\n  }, \"h1.jsx-1775877772{background:#3399ff;color:#ffffff;}.Title.jsx-1775877772{padding-left:5px;}.loginButton.jsx-1775877772{background:#ffff00;position:absolute;top:25px;right:25px;width:80px;height:35px;}.loginButton.jsx-1775877772:hover{background:#3399ff;}Link.jsx-1775877772{color:#000000;}.JWC.jsx-1775877772{position:absolute;top:120px;right:20px;height:800px;width:500px;}.UCLA.jsx-1775877772{font-style:italic;color:#ffff00;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/runner/GroupProjectGYM/pages/index.js */\")) : __jsx(\"div\", {\n    className: \"jsx-427384923\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"jsx-427384923\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-427384923\" + \" \" + \"UCLA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, \"UCLA\"), __jsx(\"div\", {\n    className: \"jsx-427384923\" + \" \" + \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, \" Treadmills At JWC\")), __jsx(\"p\", {\n    className: \"jsx-427384923\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, \"You are not permitted to see this page. Please Sign in or Sign up...\"), __jsx(\"button\", {\n    onClick: next_auth_client__WEBPACK_IMPORTED_MODULE_4__[\"signIn\"],\n    className: \"jsx-427384923\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, \"Sign in\"), __jsx(\"button\", {\n    className: \"jsx-427384923\" + \" \" + \"signUp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {\n    href: \"./signUp/signup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"Sign up\")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n    id: \"427384923\",\n    __self: this\n  }, \".signUp.jsx-427384923{margin-left:10px;}h1.jsx-427384923{background:#3399ff;color:#ffffff;}.Title.jsx-427384923{padding-left:5px;}.UCLA.jsx-427384923{font-style:italic;color:#ffff00;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/runner/GroupProjectGYM/pages/index.js */\"));\n}\n/* Get data from mongodb Database so that it can be displayed */\n/////////////////////////////////////////////////////////////////////////////11_18_2020/////////////////////////////////////////////////////////////////////////////////////////////\n\n/*\nexport async function createTreadmill(client, treadmill){\n  const { db } = await connectToDatabase()\n  const result = await db\n    .collection(\"Treadmills\")\n    .insertOne(treadmill);\n  console.log(`New Treadmill created with the following id: ${result.insertedId}`);\n}\n\nexport async function createTreadmills(newTreadmills){\n  const { db } = await connectToDatabase()\n  const result = await db.collection(\"Treadmills\").insertMany(newTreadmills);\n  console.log(`${result.insertedCount} new treadmill(s) created with the following id(s):`)\n  console.log(result.insertedIds);\n}\n\nexport async function upsertTreadmill(treadmill, updatedTreadmill) \n//update if exists, insert if not\n{\n  const { db } = await connectToDatabase()\n  const result = await db\n    .collection(\"Treadmills\")\n    .updateOne({ name: treadmill },\n              { $set: updatedTreadmill },\n              { upsert: true });\n    console.log(`${result.matchedCount} Treadmill(s) matched the name.`);\n\n  if (result.upsertedCount > 0) {\n      console.log(`One treadmill was inserted with the id ${result.upsertedId._id}`);\n  } else {\n      console.log(`${result.modifiedCount} treadmill(s) was/were updated.`);\n  }\n}\n\nexport async function updateTreadmill(treadmill, updatedTreadmill) \n//only update, no insertion\n{\n  const { db } = await connectToDatabase()\n  const result = await db\n        .collection(\"Treadmills\")\n        .updateOne({ name: treadmill }, \n        { $set: updatedTreadmill });\n  console.log(`${result.matchedCount} document(s) matched the query criteria.`);\n  console.log(`${result.modifiedCount} document(s) was/were updated.`);\n}\n\nexport async function deleteTreadmills(treadmills) \n//delete all treadmills with a specific name\n{\n  const { db } = await connectToDatabase()\n  result = await db.collection(\"Treadmills\")\n          .deleteMany({ \"name\": treadmills });\n  console.log(`${result.deletedCount} document(s) was/were deleted.`);\n}\n*/\n\n_s(equipments, \"5aBmqsS5JcW0gmd5e4nrAOIPyzY=\", false, function () {\n  return [next_auth_client__WEBPACK_IMPORTED_MODULE_4__[\"useSession\"]];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Treadmill\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.js\n");

/***/ })

})